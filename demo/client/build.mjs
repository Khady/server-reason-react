// @ts-check
import esbuild from 'esbuild';
import Fs from 'fs/promises';
import Path from 'path';
import * as STier from "s-tier";
import * as Melange from "melange-ffi";

/** @type {Melange.Result<STier.Sexp, string>} */
let deserialized = STier.deserialize(
  `(
    (app/demo/universal/native/lib/Counter.re (app/demo/universal/js/Counter.js))
    (app/demo/universal/native/lib/Note_editor.re (app/demo/universal/js/Note_editor.js))
    (app/demo/universal/native/lib/Promise_renderer.re (app/demo/universal/js/Promise_renderer.js))
  )`
);

let data /* @type {STier.Sexp} */ = Melange.Result.unwrap(deserialized)
const b = Melange.List.toArray(data._0);
const sexpManifest = b.map(item => [item._0.hd._0, item._0.tl.hd._0.hd._0]);

const melangeManifest = sexpManifest.reduce((acc, [re, js]) => {
  acc[re] = `./${js}`;
  return acc;
}, {});

let writeRegisterFile = async (outputDir, melangeManifest) => {
  const registerClientComponents = Object.entries(melangeManifest).map(([name, path]) => `register("${name}", React.lazy(() => import("${path}")))`).join(';\n');
  let content = `// Generated by esbuild plugin

window.__client_manifest_map = window.__client_manifest_map || {};

const register = (name, render) => {
	window.__client_manifest_map[name] = render;
};

${registerClientComponents}
`;

  await Fs.writeFile(Path.join(outputDir, 'bootstrap.js'), content);
}

const bootstrapPlugin = {
  name: 'bootstrap',
  setup(build) {
    const bundleContents = new Map();

    // Store the contents of each output file
    build.onEnd(async (result) => {
      if (result.errors.length > 0) return;

      const outputDir = build.initialOptions.outdir || Path.dirname(build.initialOptions.outfile);

      const outputs = result.outputFiles || [];
      for (const file of outputs) {
        const relativePath = Path.relative(outputDir, file.path);
        /* console.log(JSON.stringify(Object.keys(file))); */
        console.log("  ", relativePath);
        bundleContents.set(relativePath, file.hash);
        Fs.writeFile(Path.join(outputDir, relativePath), file.text);
      }

      await writeRegisterFile(outputDir, melangeManifest);
    });
  }
};

async function build(input, output) {
  let outdir = undefined;
  let outfile = undefined;
  let splitting = false;

  /* shitty way to check if output is a directory or a file */
  if (output.endsWith('/')) {
    outdir = output;
    splitting = true;
  } else {
    outfile = output;
    splitting = false;
  }
  try {
    const result = await esbuild.build({
      entryPoints: [input],
      bundle: true,
      platform: 'browser',
      format: 'esm',
      splitting,
      logLevel: 'error',
      outdir: outdir,
      outfile: outfile,
      plugins: [bootstrapPlugin],
      write: false, // Need this to get outputFiles in onEnd
      metafile: true, // Generate metadata about the build
    });

    console.log('\nBuild completed successfully');
    return result;
  } catch (error) {
    console.error('\nBuild failed:', error);
    process.exit(1);
  }
}

const input = process.argv[2];
const output = process.argv[3];

if (!input) {
  console.error('Please provide an input file path');
  process.exit(1);
}

build(input, output);
