{0 server-reason-react}

This is the documentation and API for {{:https://github.com/ml-in-barcelona/server-reason-react}server-reason-react}, an implementation of [react], [react-dom] and [react-dom/server] to run on the server with {{:https://reasonml.github.io/}Reason}/{{:https://ocaml.org/}OCaml}, with the purpose to Server-side render HTML markup from a {{:https://reasonml.github.io/reason-react//}reason-react} application natively (for both SSR and SSG).

The entire model is designed to share components (and code) between the client and the server. To achieve this goal [server-reason-react] also contains other libraries and ppxes that are useful to share code between the two architectures. Makes rendering React components on the server much simpler.

This libraries are native implementations or stubs of the commonly known libraries from the melange-community, such as {!Belt}, {!Js}, {!Webapi}, {!URL}, {!Promise} and {!Fetch}.

Note: In the future we plan to extract these libraries into their own packages.

{0:why Why}

Explained more about the motivation in this blog post {{:https://sancho.dev/blog/server-side-rendering-react-in-ocaml}sancho.dev/blog/server-side-rendering-react-in-ocaml} and also in my talk about {{:https://www.youtube.com/watch?v=e3qY-Eg9zRY&ab_channel=ReactAlicante}Server side rendering React natively with Reason} at ReactAlicante 2023.

{0:intro Introduction}

This documentation will explain the different modules available in [server-reason-react], and how to use them, however it is assumed a minimum understanding of [Reason], [reason-react], [Melange] and [dune].

Let's start with a component.

{[
  module Greetings = {
    [@react.component]
    let make = (~name) => {
      <div>
        <h1> {React.string("Hello " ++ name)} </h1>
      </div>
    }
  };
]}

The interface of a [server-reason-react] component looks exactly like [reason-react].

The main difference is under {!ReactDOM}:

{[
  let html = ReactDOM.renderToStaticMarkup(<Greetings name="visitor" />)
  // <div><h1>Hello visitor</h1></div>
]}

Where you can find {!ReactDOM.renderToStaticMarkup}, {!ReactDOM.renderToString} and {!ReactDOM.renderToLwtStream}.

{1:core React and ReactDOM}

[server-reason-react] provides {!React} and {!ReactDOM} modules with the same interface as reason-react, including the {{:https://reasonml.github.io/docs/en/jsx}JSX transformation} via [server-reason-react.ppx]

- {!React} (server-reason-react.react)
- {!ReactDOM} (server-reason-react.reactDom)

Note: [server-reason-react.ppx] needs to be a different ppx than [reason-react-ppx] since needs to transform props into an interal representation where the type is known ahead of time in order to render them on the server and more efficiently.

Add [server-reason-react.react] and [server-reason-react.reactDom] to your libraries in a your dune file
{[ (libraries (server-reason-react.react server-reason-react.reactDom) ]}

Also add [server-reason-react.ppx] to your pps list in your dune files
{[ (preprocess (pps server-reason-react.ppx)) ]}

{1 API}

{!modules: react reactDom runtime Dom webapi Js Belt Fetch Promise URL}

{0:guides Guides}

{ol
  {li {{!page-"universal-code"}How universal code works}}
  {li {{!page-"code-structure"}How to structure the code}}
}

